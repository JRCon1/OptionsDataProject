# -*- coding: utf-8 -*-
"""ProjectTest

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EU0Z8UrcpIpeAH5ct6lBis9UAMP85Yre
"""

# ──────────────────────────── CONFIG ────────────────────────────
KEYFILE   = "/content/optionsdata-463302-04ba714dd895.json"  # path to your uploaded JSON key
FOLDER_ID = "1qvBoAAjByUofUkPE6yAU4xTJR8em31Jk"               # just the ID, not full URL
FILE_NAME = "opts.xlsx"                                     # constant workbook name
# ────────────────────────────────────────────────────────────────

!pip install --quiet pandas yfinance openpyxl google-api-python-client google-auth google-auth-httplib2 google-auth-oauthlib

from pathlib import Path
from datetime import datetime, timedelta, date
import io, pandas as pd, yfinance as yf, openpyxl

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaFileUpload

# ── Google Drive helpers ───────────────────────────────────────
creds = service_account.Credentials.from_service_account_file(
    KEYFILE,
    scopes=["https://www.googleapis.com/auth/drive.file"]
)
drive = build("drive", "v3", credentials=creds, cache_discovery=False)

def find_file_id(name, folder_id):
    q = f"'{folder_id}' in parents and name='{name}' and trashed=false"
    r = drive.files().list(q=q, fields="files(id)").execute()
    files = r.get("files", [])
    return files[0]["id"] if files else None

def download_file(file_id, local_path):
    request = drive.files().get_media(fileId=file_id)
    fh = io.FileIO(local_path, "wb")
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        _, done = downloader.next_chunk()

def upload_or_update(local_path, file_id=None):
    media = MediaFileUpload(
        local_path,
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    if file_id:
        drive.files().update(fileId=file_id, media_body=media).execute()
        print("✅ Drive workbook updated")
    else:
        metadata = {"name": FILE_NAME, "parents": [FOLDER_ID]}
        drive.files().create(body=metadata, media_body=media).execute()
        print("✅ Drive workbook created")

# ── Your original option-fetch logic ───────────────────────────
TICKERS  = ["SPY", "UPRO"]
OPT_TYPE = "c"
BOUND    = 0.20
MAX_DTE  = 120

def get_options(ticker_symbol: str,
                opt_type: str = "c",
                bound: float = 0.2,
                max_dte: int = 120) -> pd.DataFrame:
    tk   = yf.Ticker(ticker_symbol)
    spot = tk.history(period="1d")["Close"].iloc[-1]

    lo, hi      = round(spot * (1 - bound), 0), round(spot * (1 + bound), 0)
    cutoff_date = datetime.utcnow() + timedelta(days=max_dte)
    timestamp   = datetime.now().replace(microsecond=0)

    rows = []
    for exp_str in tk.options:
        exp_date = pd.to_datetime(exp_str)
        if exp_date > cutoff_date:
            continue
        chain = tk.option_chain(exp_str)
        df = chain.calls if opt_type == "c" else chain.puts
        df = df.loc[
            df["strike"].between(lo, hi),
            ["contractSymbol", "strike", "lastPrice", "bid", "ask", "impliedVolatility"]
        ].copy()
        if df.empty:
            continue
        df["symbol"]           = ticker_symbol
        df["expiry"]           = exp_date
        df["downloaded_at"]    = timestamp
        df["underlying_price"] = round(spot, 2)
        rows.append(df)

    if not rows:
        return pd.DataFrame()
    out        = pd.concat(rows, ignore_index=True)
    now        = pd.Timestamp.now(tz=None)
    out["dte"] = (out["expiry"] - now).dt.days + 1
    return out[out["dte"] > 0]

# ── 1. ensure local workbook exists ────────────────────────────
LOCAL_XLSX = "/content/opts.xlsx"
file_id = find_file_id(FILE_NAME, FOLDER_ID)

if file_id:
    download_file(file_id, LOCAL_XLSX)
else:
    wb = openpyxl.Workbook()
    wb.save(LOCAL_XLSX)

# ── 2. append today’s sheets ───────────────────────────────────
timestamp = datetime.now().strftime("%Y-%m-%d_%H%M")

with pd.ExcelWriter(LOCAL_XLSX, engine="openpyxl", mode="a", if_sheet_exists="overlay") as xl:
    for tk in TICKERS:
        df = get_options(tk, OPT_TYPE, BOUND, MAX_DTE)
        if df.empty:
            print(f"· {tk}: no rows matched filters")
            continue
        sheet = f"{tk}_{OPT_TYPE}_{timestamp}"
        if len(sheet) > 31:
            sheet = sheet[:31]
        df.to_excel(xl, sheet_name=sheet, index=False)
        print(f"✔ {sheet:31s} rows={len(df):4d}")

# ── 3. push workbook back to Drive ─────────────────────────────
upload_or_update(LOCAL_XLSX, file_id)